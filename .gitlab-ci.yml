stages:
  - build
  - test

variables:
  GIT_SUBMODULE_STRATEGY: none
  TEST_REPO_BRANCH: main

# Variables that should be specified from the project settings:
# - GITHUB_USERNAME     : username for the private dependencies on GitHub
# - GITHUB_ACCESS_TOKEN : access token for the private dependencies on GitHub
# - TEST_REPO_URL       : URL of the repository with tests, including the username and token parts if necessary
# - ENABLE_JOBS         : list of jobs to run, such as "build-linux,test-linux"

# The script assumes that the following software is installed on the runner:
# - GCC or Clang (Linux)
# - Visual Studio 2019 (Windows)
# - CMake 3.10+
# - Ninja build system
# - Python 3.8+ and scikit-image


# Add the GitHub credentials for the submodules
.checkout-submodules: &checkout-submodules
  - git submodule set-url RTXGI https://${GITHUB_USERNAME}:${GITHUB_ACCESS_TOKEN}@github.com/NVIDIAGameWorks/RTXGI.git
  - git submodule set-url NRD https://${GITHUB_USERNAME}:${GITHUB_ACCESS_TOKEN}@github.com/NVIDIAGameWorks/RayTracingDenoiser.git
  - git submodule update --init --recursive


# Remove the credentials to avoid storing them in the runner working tree
.cleanup-submodules: &cleanup-submodules
  - git submodule set-url RTXGI https://github.com/NVIDIAGameWorks/RTXGI.git
  - git submodule set-url NRD https://github.com/NVIDIAGameWorks/RayTracingDenoiser.git


# Clone the tests repository
.clone-tests: &clone-tests
  - git clone -b ${TEST_REPO_BRANCH} ${TEST_REPO_URL} tests


build-linux:
  stage: build
  tags:
    - linux
  rules:
    - if: '$ENABLE_JOBS =~ /build-linux/'
  before_script:
    - *checkout-submodules
    - ./update_dependencies.sh
  script:
    - mkdir build && cd build
    - cmake .. -GNinja
    - ninja
  after_script:
    - *cleanup-submodules
  artifacts:
    name: "rtxdi-linux-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/bin/

build-windows:
  stage: build
  tags:
    - windows
  rules:
    - if: '$ENABLE_JOBS =~ /build-windows/'
  before_script:
    - *checkout-submodules
    - ./update_dependencies.bat
  script:
    - ./set_vs_vars.ps1
    - mkdir build
    - cd build
    - cmake .. -GNinja -DRTXDI_CONSOLE_APP=ON
    - cmake --build .
  after_script:
    - *cleanup-submodules
  artifacts:
    name: "rtxdi-windows-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/bin/

test-linux:
  stage: test
  tags:
    - linux
  rules:
    - if: '$ENABLE_JOBS =~ /test-linux/'
  dependencies: 
    - build-linux
  before_script:
    - ./update_dependencies.sh
    - *clone-tests
  script:
    - cd tests
    - python test.py
  artifacts:
    name: "rtxdi-linux-test-outputs-${CI_COMMIT_SHORT_SHA}"
    when: on_failure
    paths:
      - tests/outputs/

test-windows-dx12:
  stage: test
  tags:
    - windows
  rules:
    - if: '$ENABLE_JOBS =~ /test-windows-dx12/'
  dependencies: 
    - build-windows
  before_script:
    - ./update_dependencies.bat
    - *clone-tests
  script:
    - cd tests
    - python test.py
  artifacts:
    name: "rtxdi-windows-test-outputs-dx12-${CI_COMMIT_SHORT_SHA}"
    when: on_failure
    paths:
      - tests/outputs/

test-windows-vulkan:
  stage: test
  tags:
    - windows
  rules:
    - if: '$ENABLE_JOBS =~ /test-windows-vulkan/'
  dependencies: 
    - build-windows
  before_script:
    - ./update_dependencies.bat
    - *clone-tests
  script:
    - cd tests
    - python test.py --vulkan
  artifacts:
    name: "rtxdi-windows-test-outputs-vulkan-${CI_COMMIT_SHORT_SHA}"
    when: on_failure
    paths:
      - tests/outputs/
